#!/usr/bin/env bash
#
# Vault Backup Script
# Performs automated Vault raft snapshots with health checks and validation
#

set -euo pipefail

# Configuration
BACKUP_DIR="{{ backup_root_dir }}/vault"
STAGING_DIR="{{ backup_staging_dir }}/vault"
LOG_FILE="{{ backup_log_dir }}/vault-backup.log"
VAULT_ADDR="${VAULT_ADDR:-https://127.0.0.1:8200}"
VAULT_SKIP_VERIFY="${VAULT_SKIP_VERIFY:-true}"
RESTIC_REPOSITORY="${RESTIC_REPOSITORY:-{{ restic_repository_nas }}}"
RESTIC_PASSWORD_FILE="${RESTIC_PASSWORD_FILE:-{{ backup_config_dir }}/restic-password}"

# Backup retention
BACKUP_RETENTION_DAYS={{ backup_retention.daily }}

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [vault-backup] $1" | tee -a "$LOG_FILE"
}

# Error handler
error_exit() {
    log "ERROR: $1"
    exit 1
}

# Check if Vault is healthy
check_vault_health() {
    log "Checking Vault health..."

    # Check if Vault is unsealed and ready
    if ! vault status >/dev/null 2>&1; then
        error_exit "Vault is not accessible or sealed"
    fi

    # Check if we can authenticate
    if ! vault auth -method=userpass username=backup password="$(cat {{ backup_config_dir }}/vault-backup-password)" >/dev/null 2>&1; then
        error_exit "Failed to authenticate with Vault"
    fi

    # Check cluster health
    local health_status
    health_status=$(vault status -format=json | jq -r '.sealed')
    if [ "$health_status" != "false" ]; then
        error_exit "Vault is sealed"
    fi

    log "Vault health check passed"
}

# Create backup directories
setup_directories() {
    log "Setting up backup directories..."

    mkdir -p "$BACKUP_DIR"
    mkdir -p "$STAGING_DIR"

    # Clean old staging files
    find "$STAGING_DIR" -type f -name "*.snap" -mtime +1 -delete 2>/dev/null || true

    log "Directories prepared"
}

# Perform Vault snapshot
create_snapshot() {
    local timestamp
    timestamp=$(date '+%Y%m%d_%H%M%S')
    local snapshot_file="$STAGING_DIR/vault_snapshot_${timestamp}.snap"

    log "Creating Vault snapshot: $snapshot_file"

    # Create the snapshot
    if ! vault operator raft snapshot save "$snapshot_file"; then
        error_exit "Failed to create Vault snapshot"
    fi

    # Verify snapshot file exists and has content
    if [ ! -f "$snapshot_file" ] || [ ! -s "$snapshot_file" ]; then
        error_exit "Snapshot file is empty or missing"
    fi

    local file_size
    file_size=$(stat -f%z "$snapshot_file" 2>/dev/null || stat -c%s "$snapshot_file" 2>/dev/null)
    log "Snapshot created successfully: $snapshot_file (${file_size} bytes)"

    echo "$snapshot_file"
}

# Validate snapshot integrity
validate_snapshot() {
    local snapshot_file="$1"

    log "Validating snapshot integrity..."

    # Check file format (Vault snapshots are typically gzipped)
    if ! file "$snapshot_file" | grep -q "gzip"; then
        log "WARNING: Snapshot file format may be unexpected"
    fi

    # Test snapshot by attempting to inspect it
    if ! vault operator raft snapshot inspect "$snapshot_file" >/dev/null 2>&1; then
        error_exit "Snapshot validation failed - file may be corrupted"
    fi

    log "Snapshot validation passed"
}

# Upload to restic repository
upload_to_restic() {
    local snapshot_file="$1"
    local backup_name
    backup_name=$(basename "$snapshot_file")

    log "Uploading snapshot to restic repository..."

    # Verify restic repository exists
    if ! restic -r "$RESTIC_REPOSITORY" snapshots >/dev/null 2>&1; then
        log "Initializing restic repository..."
        if ! restic -r "$RESTIC_REPOSITORY" init; then
            error_exit "Failed to initialize restic repository"
        fi
    fi

    # Create backup with metadata
    if ! restic -r "$RESTIC_REPOSITORY" backup "$snapshot_file" \
        --tag vault \
        --tag "$(date '+%Y-%m-%d')" \
        --host "$(hostname)" \
        --time "$(date -Iseconds)"; then
        error_exit "Failed to upload snapshot to restic repository"
    fi

    log "Snapshot uploaded to restic repository successfully"
}

# Cleanup old local backups
cleanup_old_backups() {
    log "Cleaning up old local backups..."

    # Remove local snapshots older than retention period
    find "$BACKUP_DIR" -name "vault_snapshot_*.snap" -mtime +$BACKUP_RETENTION_DAYS -delete 2>/dev/null || true
    find "$STAGING_DIR" -name "vault_snapshot_*.snap" -mtime +1 -delete 2>/dev/null || true

    log "Old backup cleanup completed"
}

# Verify backup in restic
verify_backup() {
    log "Verifying backup in restic repository..."

    # Check latest snapshot
    local latest_snapshot
    latest_snapshot=$(restic -r "$RESTIC_REPOSITORY" snapshots --tag vault --last 1 --json 2>/dev/null | jq -r '.[0].short_id // empty')

    if [ -z "$latest_snapshot" ]; then
        error_exit "No backup found in restic repository"
    fi

    # Verify snapshot integrity
    if ! restic -r "$RESTIC_REPOSITORY" check --read-data --check-unused "$latest_snapshot" >/dev/null 2>&1; then
        error_exit "Backup verification failed in restic repository"
    fi

    log "Backup verification passed (snapshot: $latest_snapshot)"
}

# Main backup process
main() {
    log "Starting Vault backup process..."

    # Pre-backup checks
    check_vault_health
    setup_directories

    # Create and validate snapshot
    local snapshot_file
    snapshot_file=$(create_snapshot)
    validate_snapshot "$snapshot_file"

    # Upload to restic
    upload_to_restic "$snapshot_file"

    # Post-backup tasks
    verify_backup
    cleanup_old_backups

    log "Vault backup completed successfully"
}

# Execute main function
main "$@"
