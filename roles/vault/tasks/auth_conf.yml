---
- name: Create policy for service secrets
  ansible.builtin.uri:
    url: "https://127.0.0.1:8200/v1/sys/policies/acl/service-secrets"
    method: PUT
    validate_certs: false
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body_format: json
    body:
      policy: |
        {% for service in services %}
        path "secret/data/{{ service.name }}" {
          capabilities = ["read"]
        }
        {% endfor %}
    status_code: [200, 204]
  vars:
    services:
      - { name: "postgres" }
      - { name: "minio" }

- name: Create AppRole for service agents
  ansible.builtin.uri:
    url: "https://127.0.0.1:8200/v1/auth/approle/role/service-agent"
    method: POST
    validate_certs: false
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body_format: json
    body:
      token_policies: ["service-secrets"]
      token_ttl: "1h"
      token_max_ttl: "24h"
      bind_secret_id: true
    status_code: [200, 204]

- name: Get AppRole role-id
  ansible.builtin.uri:
    url: "https://127.0.0.1:8200/v1/auth/approle/role/service-agent/role-id"
    method: GET
    validate_certs: false
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
  register: approle_role_id

- name: Generate AppRole secret-id
  ansible.builtin.uri:
    url: "https://127.0.0.1:8200/v1/auth/approle/role/service-agent/secret-id"
    method: POST
    validate_certs: false
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body_format: json
    status_code: [200, 204]
    body: {}
  register: approle_secret_id


- name: Store AppRole credentials in systemd-creds
  ansible.builtin.shell: |
    set -euo pipefail
    echo '{{ item.value }}' \
    | systemd-creds encrypt \
        --name={{ item.key }} \
        --pretty - /etc/credstore/{{ item.key }}
  args:
    executable: /bin/bash
  loop:
    - key: "approle_role_id"
      value: "{{ approle_role_id.json.data.role_id }}"
    - key: "approle_secret_id"
      value: "{{ approle_secret_id.json.data.secret_id }}"
  changed_when: false
  no_log: true

- name: Enable userpass auth method
  ansible.builtin.uri:
    validate_certs: false
    url: "https://127.0.0.1:8200/v1/sys/auth/userpass"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body_format: json
    body:
      type: "userpass"
      description: "Username/password auth method"
    status_code: [200, 204]
  failed_when: false
  no_log: true

- name: Create admin policy
  ansible.builtin.uri:
    url: "https://127.0.0.1:8200/v1/sys/policies/acl/admin"
    method: PUT
    status_code: [200, 204]
    validate_certs: false
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body_format: json
    body:
      policy: |
        # Full access to all paths
        path "*" {
          capabilities = ["create", "read", "update", "delete", "list", "sudo"]
        }

- name: Create admin user
  ansible.builtin.uri:
    validate_certs: false
    url: "https://127.0.0.1:8200/v1/auth/userpass/users/{{ vault_admin_username }}"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body_format: json
    status_code: [200, 204]
    body:
      password: "{{ vault_admin_password }}"
      policies: ["default", "admin"]
  no_log: true

- name: Revoke root token
  ansible.builtin.uri:
    validate_certs: false
    url: "https://127.0.0.1:8200/v1/auth/token/revoke-self"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    status_code: [200, 204]
  no_log: true
